{"version":3,"sources":["monaco-mixins.js"],"names":["root","factory","define","amd","exports","module","require","Monaco","_","Backbone","this","Mixin","mixin","result","desinationClass","forIn","val","key","original","prototype","self","args","Array","slice","call","arguments","length","apply","extend","cloneDeep","mixinFunctions","namespace","newMixin","create","Application","mixins","index","Error"],"mappings":"CAAC,SAASA,EAAMC,GACQ,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,SAAU,WAAY,UAAWD,GACb,gBAAZG,SAChBC,OAAOD,QAAUH,EAAQK,QAAQ,UAAWA,QAAQ,YAAaA,QAAQ,WAEzEN,EAAKO,OAASN,EAAQD,EAAKQ,EAAGR,EAAKS,SAAUT,EAAKO,SAEpDG,KAAM,SAASF,EAAGC,EAAUF,GAC9B,GAAII,GAAQ,SAAWC,GAGrB,GAAIC,GAAS,SAAWC,GAEtBN,EAAEO,MAAOH,EAAO,SAAWI,EAAKC,GAE9B,GAAIC,GAAWJ,EAAgBK,UAAWF,IAAS,YAG/B,mBAARD,GACVF,EAAgBK,UAAWF,GAAQ,WACjC,GAAIG,GAAOV,KACTW,EAAOC,MAAMH,UAAUI,MAAMC,KAAMC,UAIrC,OADAJ,GAAML,EAAIU,OAAS,GAAM,WAAc,MAAOR,GAASS,MAAOP,EAAMK,YAC7DT,EAAIW,MAAOjB,KAAMW,IAID,gBAARL,IAAwC,gBAAbE,GAC5CV,EAAEoB,OAAQd,EAAgBK,UAAWF,GAAOL,EAAOK,IAInDH,EAAgBK,UAAWF,GADF,gBAARD,GACkBR,EAAEqB,UAAWjB,EAAOK,IAIpBL,EAAOK,KAahD,OAPAJ,GAAOiB,eAAiBlB,MAGxBC,EAAOM,UAAUY,UAAY,SAC7BlB,EAAOkB,UAAY,SACnBlB,EAAOe,OAAS,SAAUI,GAAa,MAAOrB,GAAMsB,OAAQzB,EAAEoB,UAAYhB,EAAOoB,KAE1EnB,EA4BT,OAxBAF,GAAMsB,OAAS,SAAWrB,GACxB,MAAO,IAAID,GAAOC,IAIpBL,EAAOI,MAAQA,EAGfJ,EAAO2B,YAAYf,UAAUgB,UAI7B5B,EAAO2B,YAAYf,UAAUP,MAAQ,SAAWE,GAC9C,GAAIsB,EAGJ,KAAMA,EAAQ,EAAGA,EAAQX,UAAUC,OAAQU,IAAU,CACnD,IAAM1B,KAAKyB,OAAQV,UAAWW,IAC5B,KAAM,IAAIC,OAAO,yBAA2BZ,UAAWW,GAEzD1B,MAAKyB,OAAQV,UAAWW,IAAWtB,KAIhCP","file":"monaco-mixins.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['lodash', 'backbone', 'monaco'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('lodash'), require('backbone'), require('monaco'));\n  } else {\n    root.Monaco = factory(root._, root.Backbone, root.Monaco);\n  }\n}(this, function(_, Backbone, Monaco) {\nvar Mixin = function ( mixin ) {\n  // Resulting mixin that will apply the additional functions\n  // Usage: app.mixins.MyMixin( class );\n  var result = function ( desinationClass ) {\n\n    _.forIn( mixin, function ( val, key ) {\n      //Get the original if it exists, otherwise set to no-op.\n      var original = desinationClass.prototype[ key ] || function () {};\n\n      // Mixin property is a function\n      if ( typeof val === 'function' ) {\n        desinationClass.prototype[ key ] = function () {\n          var self = this,\n            args = Array.prototype.slice.call( arguments ); // So we can modify arguments\n\n          // Create the 'next' function & inject into last arguments position.\n          args[ val.length - 1 ] = function () { return original.apply( self, arguments ); };\n          return val.apply( this, args );\n        };\n\n        // Mixin is an object and the object already exists\n      } else if ( typeof val === 'object' && typeof original === 'object' ) {\n        _.extend( desinationClass.prototype[ key ], mixin[ key ] );\n\n        // Mixin is a string, int, bool, or doesn't already exist.\n      } else if ( typeof val === 'object' ) {\n        desinationClass.prototype[ key ] = _.cloneDeep( mixin[ key ] );\n\n        // Mixin is a string, int, bool, or doesn't already exist.\n      } else {\n        desinationClass.prototype[ key ] = mixin[ key ];\n      }\n    } );\n  };\n\n  //Exposes the mixin functions\n  result.mixinFunctions = mixin || {};\n\n  // Allows Monaco to add the mixins to the appropriate application object\n  result.prototype.namespace = 'mixins';\n  result.namespace = 'mixins';\n  result.extend = function( newMixin ) { return Mixin.create( _.extend( {}, mixin, newMixin ) ); };\n\n  return result;\n};\n\n// Mixin factory\nMixin.create = function ( mixin ) {\n  return new Mixin( mixin );\n};\n\n// Expose Mixin on monaco\nMonaco.Mixin = Mixin;\n\n// Creates the mixins object on monaco application\nMonaco.Application.prototype.mixins = {};\n\n// Applies several mixins at once\n// Usage: app.mixin(class, 'mixin1', 'mixin2', ..., 'mixinN');\nMonaco.Application.prototype.mixin = function ( desinationClass ) {\n  var index;\n\n  // Loop through the supplied mixins\n  for ( index = 1; index < arguments.length; index++ ) {\n    if ( !this.mixins[ arguments[ index ] ] ) {\n      throw new Error( 'Unable to find mixin: ' + arguments[ index ] );\n    }\n    this.mixins[ arguments[ index ] ]( desinationClass );\n  }\n};\n\nreturn Monaco;\n}));\n"],"sourceRoot":"/source/"}